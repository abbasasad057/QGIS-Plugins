# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GraduatedRenderer
                                 A QGIS plugin
 This plugin renders selected layer to specified number of classes.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-03-29
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import *
from PyQt5.QtWidgets import QAction, QMessageBox
from qgis.core import *
from qgis.utils import *
# Initialize Qt resources from file resources.py
from PyQt5.QtGui import *
from .resources import *
# Import the code for the dialog
from .graduated_renderer_dialog import GraduatedRendererDialog
import os.path


class GraduatedRenderer:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'GraduatedRenderer_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = GraduatedRendererDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&GraduatedSymbologyRenderer')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'GraduatedSymbologyRenderer')
        self.toolbar.setObjectName(u'GraduatedSymbologyRenderer')
        self.defStyle = QgsStyle().defaultStyle()

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('GraduatedSymbologyRenderer', message)

    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/graduated_renderer/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'GraduatedSymbologyRenderer'),
            callback=self.run,
            parent=self.iface.mainWindow())

        defaultColorRampNames = self.defStyle.colorRampNames()
        # QgsMessageLog.logMessage(str(type(defaultColorRampNames[0])))
        self.dlg.rampComBox.clear()
        self.dlg.rampComBox.addItems(defaultColorRampNames)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&GraduatedSymbologyRenderer'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar

    def get_info(self, lyr_name, layers):
        for lyr in layers:
            if lyr.name() == lyr_name:
                selected_fields = [fld.name() for fld in lyr.fields()]
                selected_layer = lyr
        # QgsMessageLog.logMessage(str(selected_fields))
        try:
            return selected_layer, selected_fields
        except:
            return None, None

    def update(self, layers):
        selected_lyr_name = self.dlg.LyrComBox.currentText()
        lyr, flds = self.get_info(selected_lyr_name, layers)
        if flds:
            self.dlg.FldComBox.clear()
            self.dlg.FldComBox.addItems(flds)

    def classify_lyr(self, layers):
        lyr_name = self.dlg.LyrComBox.currentText()
        fld_name = self.dlg.FldComBox.currentText()
        lyr, Flds = self.get_info(lyr_name, layers)
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Critical)
        for fld in lyr.fields():
            # QgsMessageLog.logMessage(str(fld.type()))
            if fld.name() == fld_name and (fld.type() == 2 or fld.type() == 4 or fld.type() == 6):
                # QgsMessageLog.logMessage(str(fld.type()))
                num_class = self.dlg.lineEdit.text()
                try:
                    int(num_class)
                except:
                    num_class = None
                if num_class and (int(num_class) > 0) and (int(num_class) <= 50):
                    my_renderer = QgsGraduatedSymbolRenderer()

                    # defStyle = QgsStyle().defaultStyle()
                    # defaultColorRampNames = defStyle.colorRampNames()
                    ramp = self.defStyle.colorRamp(self.dlg.rampComBox.currentText())
                    my_renderer.updateColorRamp(ramp)

                    my_renderer.setMode(my_renderer.EqualInterval)
                    my_renderer.setClassAttribute(fld_name)
                    my_renderer.updateClasses(lyr, my_renderer.EqualInterval, int(num_class))

                    lyr.setRenderer(my_renderer)
                    lyr.triggerRepaint()
                    self.iface.mapCanvas().refresh()
                    msg.setIcon(QMessageBox.Information)
                    msg.setWindowTitle("Classification Successful")
                    msg.setText("Classification Successful")
                    msg.exec_()
                else:
                    msg.setWindowTitle("Invalid Entry")
                    msg.setText("Invalid number of classes")
                    msg.setDetailedText("Number of classes must be integer between 1 and 50.")
                    msg.exec_()
            elif fld.name() == fld_name and not (fld.type() == 2 or fld.type() == 4 or fld.type() == 6):
                msg.setWindowTitle("Invalid Field")
                # QgsMessageLog.logMessage(str("Select Valid Field"))
                msg.setText("Select Valid Field")
                msg.setDetailedText("Selected field must have Numeric type.")
                msg.exec_()

    def run(self):
        """Run method that performs all the real work"""
        layers = QgsProject.instance().mapLayers().values()
        # QgsMessageLog.logMessage(str(layers))
        lyr_names = [lyr.name() for lyr in layers]
        # QgsMessageLog.logMessage(str(lyr_names))
        self.dlg.LyrComBox.clear()
        self.dlg.LyrComBox.currentTextChanged.connect(lambda: (self.update(layers)))
        self.dlg.LyrComBox.addItems(lyr_names)
        self.dlg.classifyBtn.clicked.connect(lambda: (self.classify_lyr(layers)))
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # QgsMessageLog.logMessage(str(result))
        self.dlg.LyrComBox.currentTextChanged.disconnect()
        self.dlg.classifyBtn.clicked.disconnect()