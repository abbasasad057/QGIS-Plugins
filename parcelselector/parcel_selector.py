# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ParcelSelector
                                 A QGIS plugin
 This plugin converts shapefiles from one coordinate system to another.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2018-10-23
        git sha              : $Format:%H$
        copyright            : (C) 2018 by asad
        email                : abbasasad057@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from PyQt5.QtCore import QSettings, QTranslator, qVersion, QCoreApplication,QVariant
from PyQt5.QtGui import QIcon
from PyQt5.QtWidgets import QAction,QFileDialog,QMessageBox
# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .parcel_selector_dialog import ParcelSelectorDialog
import os.path
from qgis.core import *
import os


class ParcelSelector:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ParcelSelector_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)

            if qVersion() > '4.3.3':
                QCoreApplication.installTranslator(self.translator)

        # Create the dialog (after translation) and keep reference
        self.dlg = ParcelSelectorDialog()

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Parcel Selector')
        # TODO: We are going to let the user set this up in a future iteration
        self.toolbar = self.iface.addToolBar(u'ParcelSelector')
        self.toolbar.setObjectName(u'ParcelSelector')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ParcelSelector', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToVectorMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def run_merge_shapefile(self):
        layer_list= [file for file in os.listdir(self.InputPath) if file.endswith('.shp')]
        crs_string=self.dlg.lineEdit_2.text()
        threshold=self.dlg.lineEdit_4.text()
        self.InputPath=self.dlg.lineEdit.text()
        self.OutputPath=self.dlg.lineEdit_3.text()
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setWindowTitle("Successful")
        msg.setText("Task Completed :)")
        if not crs_string:
            crs_string='EPSG:3857'
            print('No crs provided defaulting to '+crs_string)
        if not self.OutputPath:
            self.OutputPath=self.InputPath+r'/transformed'
            print('No output specified defaulting to '+self.OutputPath)
        new_field='area_shape'
        os.mkdir(self.OutputPath)
        crs = QgsCoordinateReferenceSystem(f"{crs_string}")
        # print(layer_list)
        # print(crs_string,crs)
        testing=[]
        for lyr in set(layer_list):
            layer = QgsVectorLayer(self.InputPath+'/'+lyr, "polygon", "ogr")
            mem_layer = QgsVectorLayer(f"Polygon?crs={crs_string.lower()}", "memory_layer", "memory")
            feats = [feat for feat in layer.getFeatures()]
            mem_layer_data = mem_layer.dataProvider()
            attr = layer.dataProvider().fields().toList()
            mem_layer_data.addAttributes(attr)
            mem_layer.updateFields()
            mem_layer_data.addFeatures(feats)
            # layer.setAttribute(pkIdx+1, lyr.dataProvider().defaultValueClause(pkIdx))
            # print([f.name() for f in layer.fields()])
            mem_layer.startEditing()
            provider = mem_layer.dataProvider()
            provider.addAttributes([QgsField("area_shape", QVariant.Double)])
            mem_layer.updateFields()
            mem_layer.commitChanges()
            mem_feats = [feat for feat in mem_layer.getFeatures()]
            # print([f.name() for f in mem_layer.fields()])
            idx = mem_layer.dataProvider().fieldNameIndex('area_shape')
            # print(idx)
            filtered_feats=[]
            counter=0
            feat_area=[]       
            mem_layer.startEditing()
            for f in mem_feats:
                # geom_area=self.calculate_area(f.geometry(),crs)
                geom_area=f.geometry().area()
                mem_layer.changeAttributeValue(f.id(), idx,geom_area)
                if geom_area>float(threshold):
                    counter+=1
                    filtered_feats.append(f)
                    feat_area.append(geom_area)
            testing.append(counter)
            mem_layer.commitChanges()
            # error = QgsVectorFileWriter.writeAsVectorFormat(mem_layer, self.OutputPath+'/'+lyr, "utf-8", crs, "ESRI Shapefile")
            print(f"\"shape_area\">{threshold}")
            # print('Total Feats',mem_layer.)
            feat_gen=mem_layer.getFeatures(QgsFeatureRequest(QgsExpression(f"\"area_shape\">'{float(threshold)}'")))
            filtered_feats=[f for f in feat_gen]
            print('Feats selected',len(filtered_feats))
            filt_layer=QgsVectorLayer(f"Polygon?crs={crs_string.lower()}", "fil_layer", "memory")
            mem_attr=mem_layer.dataProvider().fields().toList()
            filt_layer.dataProvider().addAttributes(mem_attr)
            filt_layer.updateFields()
            filt_layer.dataProvider().addFeatures(filtered_feats)
            # if len(filtered_feats)>0:
            #     print('Saving Filt',lyr,len(filtered_feats))
            #     filt_layer=QgsVectorLayer(f"Polygon?crs={crs_string.lower()}", "filt_layer", "memory")
            #     mem_attr=mem_layer.dataProvider().fields().toList()
            #     filt_layer.dataProvider().addAttributes(mem_attr)
            #     filt_layer.updateFields()
            #     filt_layer.dataProvider().addFeatures(filtered_feats)
            #     ff_idx = filt_layer.dataProvider().fieldNameIndex('area_shape')
            #     filt_layer.startEditing()
            #     for i,ff in enumerate(filtered_feats):
            #         # ff_geom_area=self.calculate_area(ff.geometry(),crs)
            #         filt_layer.changeAttributeValue(ff.id(), ff_idx,feat_area[i])
            #     filt_layer.commitChanges()
            error1 = QgsVectorFileWriter.writeAsVectorFormat(filt_layer, self.OutputPath+'/filt_'+lyr, "utf-8", crs, "ESRI Shapefile")
            # print(testing)
        msg.exec_()

    def calculate_area(self,geom,crs):
        ellipsoid = crs.ellipsoidAcronym()
        area = QgsDistanceArea()
        # area.setEllipsoidalMode(True)
        area.setEllipsoid(ellipsoid)
        # print(area.willUseEllipsoid())
        # area.setSourceCrs(crs)
        # print(area.areaUnits())
        return area.measureArea(geom)
        
    def getInputPath(self):
        self.OutputPath=None
        self.InputPath=QFileDialog.getExistingDirectory(self.dlg,
                                                'Path to input shapefiles',
                                                '',
                                                QFileDialog.ShowDirsOnly)
        self.dlg.lineEdit.setText(self.InputPath)
    def getOutputPath(self):
        self.OutputPath=QFileDialog.getExistingDirectory(self.dlg,
                                                'Path to merged shapefile',
                                                '',
                                                QFileDialog.ShowDirsOnly)
        self.dlg.lineEdit_3.setText(self.OutputPath)

    def makeConnections(self):
        self.dlg.toolButton.clicked.connect(self.getInputPath)
        self.dlg.toolButton_2.clicked.connect(self.getOutputPath)
        self.dlg.pushButton.clicked.connect(self.run_merge_shapefile)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        self.makeConnections()
        icon_path = ':/plugins/parcel_selector/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Parcel Selector'),
            callback=self.run,
            parent=self.iface.mainWindow())


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginVectorMenu(
                self.tr(u'&Parcel Selector'),
                action)
            self.iface.removeToolBarIcon(action)
        # remove the toolbar
        del self.toolbar


    def run(self):
        """Run method that performs all the real work"""
        # show the dialog
        self.dlg.show()
        self.dlg.lineEdit.clear()
        self.dlg.lineEdit_2.clear()
        self.dlg.lineEdit_3.clear()
        self.dlg.lineEdit_4.clear()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass
